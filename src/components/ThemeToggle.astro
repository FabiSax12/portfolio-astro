<theme-toggle>
  <button
    style={{
      background: "none",
      border: "none",
      cursor: "pointer",
      color: "white",
    }}
  >
  </button>
</theme-toggle>
<script>
  class ThemeToggle extends HTMLElement {
    private readonly STORAGE_KEY = "theme";
    private _darkTheme = false;
    private button: HTMLButtonElement | null;

    constructor() {
      super();
      this.button = this.querySelector("button");

      if (!this.button) {
        console.error("Theme toggle button not found");
        return;
      }

      // Load theme preference
      const savedTheme = localStorage.getItem(this.STORAGE_KEY);
      if (!savedTheme) {
        this.darkTheme = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
      } else {
        this.darkTheme = savedTheme === "dark";
      }

      // Setup event listeners
      this.button.addEventListener("click", () => {
        this.darkTheme = !this.darkTheme;
        localStorage.setItem(
          this.STORAGE_KEY,
          this.darkTheme ? "dark" : "light",
        );
      });

      // Listen for system theme changes
      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", (e) => {
          if (!localStorage.getItem(this.STORAGE_KEY)) {
            this.darkTheme = e.matches;
          }
        });
    }

    get darkTheme(): boolean {
      return this._darkTheme;
    }

    set darkTheme(value: boolean) {
      this._darkTheme = value;
      if (value) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }

      const iconSun = `<svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    fill="currentColor"
    viewBox="0 0 24 24"
    class={className}
  >
    <g id="SVGRepo_bgCarrier" stroke-width="0">
    </g>
    <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round">
    </g>
    <g id="SVGRepo_iconCarrier">
      <circle cx="12" cy="12" r="6" stroke="currentColor" stroke-width="1.5">
      </circle>
      <path d="M12 2V3" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
      <path d="M12 21V22" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
      <path d="M22 12L21 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
      <path d="M3 12L2 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
      <path d="M19.0708 4.92969L18.678 5.32252" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
      <path d="M5.32178 18.6777L4.92894 19.0706" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
      <path d="M19.0708 19.0703L18.678 18.6775" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
      <path d="M5.32178 5.32227L4.92894 4.92943" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
    </g>
  </svg>`;
      const iconMoon = `<svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    fill="currentColor"
    viewBox="0 0 24 24"
    class={className}
  >
    <g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M3.32031 11.6835C3.32031 16.6541 7.34975 20.6835 12.3203 20.6835C16.1075 20.6835 19.3483 18.3443 20.6768 15.032C19.6402 15.4486 18.5059 15.6834 17.3203 15.6834C12.3497 15.6834 8.32031 11.654 8.32031 6.68342C8.32031 5.50338 8.55165 4.36259 8.96453 3.32996C5.65605 4.66028 3.32031 7.89912 3.32031 11.6835Z" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g>
  </svg>`;

      if (!this.button) {
        return;
      }

      this.button.innerHTML = value ? iconSun : iconMoon;
      this.button.setAttribute(
        "aria-label",
        value ? "Switch to light theme" : "Switch to dark theme",
      );
    }
  }
  customElements.define("theme-toggle", ThemeToggle);
</script>
