<theme-toggle>
  <button style="background: none; border: none; cursor: pointer; color: white"
  ></button>
</theme-toggle>

<script>
  const ICON_SUN = `<svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    fill="currentColor"
    viewBox="0 0 24 24"
  >
    <circle cx="12" cy="12" r="6" stroke="currentColor" stroke-width="1.5"></circle>
    <path d="M12 2V3" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
    <path d="M12 21V22" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
    <path d="M22 12L21 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
    <path d="M3 12L2 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
    <path d="M19.07 4.93L18.68 5.32" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
    <path d="M5.32 18.68L4.93 19.07" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
    <path d="M19.07 19.07L18.68 18.68" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
    <path d="M5.32 5.32L4.93 4.93" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
  </svg>`;

  const ICON_MOON = `<svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    fill="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      d="M3.32 11.68C3.32 16.65 7.35 20.68 12.32 20.68C16.11 20.68 19.35 18.34 20.68 15.03C19.64 15.45 18.51 15.68 17.32 15.68C12.35 15.68 8.32 11.65 8.32 6.68C8.32 5.50 8.55 4.36 8.96 3.33C5.66 4.66 3.32 7.90 3.32 11.68Z"
      stroke="#ffffff"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    ></path>
  </svg>`;

  /**
   * Componente de Custom Element para alternar entre modo oscuro y claro.
   */
  class ThemeToggle extends HTMLElement {
    STORAGE_KEY = "theme";

    _darkTheme = false;
    button: HTMLButtonElement | null = null;

    constructor() {
      super();

      this.button = this.querySelector("button");

      if (!this.button) {
        console.error("No se encontró el botón para el theme toggle.");
        return;
      }

      // Lee la preferencia del usuario o usa la preferencia del sistema.
      this.loadThemePreference();

      // Configura los listeners para las acciones del usuario y cambios del sistema.
      this.setupEventListeners();

      // Actualiza el ícono del botón de acuerdo al estado actual.
      this.updateButtonIcon();
    }

    /**
     * Lee la preferencia almacenada en localStorage o, en caso de no haber,
     * utiliza la preferencia del sistema.
     */
    loadThemePreference() {
      const savedTheme = localStorage.getItem(this.STORAGE_KEY);
      if (savedTheme) {
        // Se aplica la preferencia guardada.
        this.darkTheme = savedTheme === "dark";
      } else {
        // Se usa la preferencia del sistema.
        this.darkTheme = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
      }
    }

    setupEventListeners() {
      this.button?.addEventListener("click", () => {
        this.darkTheme = !this._darkTheme;
        localStorage.setItem(
          this.STORAGE_KEY,
          this._darkTheme ? "dark" : "light",
        );
      });

      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", (e) => {
          // Solo actualiza la preferencia si no hay una preferencia manual almacenada.
          if (!localStorage.getItem(this.STORAGE_KEY)) {
            this.darkTheme = e.matches;
          }
        });
    }

    /**
     * Getter que retorna el estado actual del tema (oscuro o claro).
     */
    get darkTheme() {
      return this._darkTheme;
    }

    /**
     * Setter para actualizar el tema.
     * Aplica o remueve la clase "dark" en el <html> y actualiza el ícono.
     */
    set darkTheme(value) {
      this._darkTheme = value;
      if (value) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
      this.updateButtonIcon();
    }

    /**
     * Actualiza el contenido del botón (ícono y descripción), según el estado.
     */
    updateButtonIcon() {
      if (!this.button) return;
      if (this._darkTheme) {
        this.button.innerHTML = ICON_SUN;
        this.button.setAttribute("aria-label", "Cambiar a tema claro");
      } else {
        this.button.innerHTML = ICON_MOON;
        this.button.setAttribute("aria-label", "Cambiar a tema oscuro");
      }
    }
  }

  // Registra el custom element para que pueda usarse en el HTML.
  customElements.define("theme-toggle", ThemeToggle);
</script>
